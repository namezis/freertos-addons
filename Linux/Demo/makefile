#############################################################################
# 
#   Copyright (c) 2017, Michael Becker (michael.f.becker@gmail.com)
# 
#   This file is part of the FreeRTOS C++ Wrappers project.
#   
#   Source Code:
#   https://github.com/michaelbecker/freertos-addons
# 
#   Project Page:
#   http://michaelbecker.github.io/freertos-addons/
# 
#   On-line Documentation:
#   http://michaelbecker.github.io/freertos-addons/docs/html/index.html
# 
#   The FreeRTOS C++ Wrappers project is free software: you can redistribute
#   it and/or modify it under the terms of the GNU General Public License as
#   published by the Free Software Foundation, either version 2
#   of the License, or (at your option) any later version.
# 
#   The FreeRTOS C++ Wrappers project is distributed in the hope that it will
#   be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
# 
#   You should have received a copy of the GNU General Public License
#	along with the FreeRTOS C++ Wrappers project.
#   If not, see <http://www.gnu.org/licenses/>.
# 
#   NOTE: A modification to the GPL is included to allow you to distribute a
#   combined work that includes FreeRTOS C++ Wrappers project
#   without being obliged to provide the source
#   code for proprietary components.
#  
#   The FreeRTOS C++ Wrappers project GPL exception text follows:
#  
#   Any FreeRTOS C++ Wrapper *source code*, whether modified or in it's 
#   original release form, or whether in whole or in part, can only be 
#   distributed by you under the terms of the GNU General Public License plus
#   this exception.  An independent module is a module which is not derived
#   from or based on FreeRTOS C++ Wrappers project.
#  
#   Clause 1:
#  
#   Linking FreeRTOS C++ Wrappers project  with other modules is making a 
#   combined work based on FreeRTOS C++ Wrappers project. Thus, the terms 
#   and conditions of the GNU General Public License V2 cover the
#   whole combination.
#  
#   As a special exception, the copyright holders of FreeRTOS C++ Wrappers 
#   project give you permission to link FreeRTOS C++ Wrappers project with 
#   independent modules to produce a statically linked executable, regardless
#   of the license terms of these independent modules, and to copy and 
#   distribute the resulting executable under terms of your choice,
#   provided that you also meet, for each linked independent module, the 
#   terms and conditions of the license of that module.  An independent 
#   module is a module which is not derived from or based on FreeRTOS C++ 
#   Wrappers project.
#  
#   Clause 2:
#  
#   FreeRTOS C++ Wrappers project may not be used for any competitive or 
#   comparative purpose, including the publication of any form of run time 
#   or compile time metric, without the express permission of the copyright 
#   holder(s) (this is the norm within the industry and is intended to ensure
#   information accuracy).
#   
#############################################################################


all:
	$(MAKE) -C Linux_g++_binary_semaphore
	$(MAKE) -C Linux_g++_binary_semaphore_no_except
	$(MAKE) -C Linux_gcc_simple_tasks
	$(MAKE) -C Linux_g++_condition_variables
	$(MAKE) -C Linux_g++_condition_variables2
	$(MAKE) -C Linux_g++_condition_variables_multiple_producers_consumers
	$(MAKE) -C Linux_g++_condition_variables_multiple_producers_consumers2
	$(MAKE) -C Linux_g++_counting_semaphore
	$(MAKE) -C Linux_g++_counting_semaphore_no_except
	$(MAKE) -C Linux_g++_critical_section
	$(MAKE) -C Linux_g++_delay_until
	$(MAKE) -C Linux_g++_dynamic_tasks
	$(MAKE) -C Linux_g++_dynamic_tasks_high_pri
	$(MAKE) -C Linux_g++_dynamic_tasks_multistart_scheduler_off
	$(MAKE) -C Linux_g++_dynamic_tasks_multistart_scheduler_on
	$(MAKE) -C Linux_g++_mutex_recursive
	$(MAKE) -C Linux_g++_mutex_recursive_no_except
	$(MAKE) -C Linux_g++_mutex_standard
	$(MAKE) -C Linux_g++_mutex_standard_no_except
	$(MAKE) -C Linux_g++_queues_multiple_producers
	$(MAKE) -C Linux_g++_queues_multiple_producers_multiple_consumers
	$(MAKE) -C Linux_g++_queues_multiple_producers_multiple_consumers_no_except
	$(MAKE) -C Linux_g++_queues_multiple_producers_no_except
	$(MAKE) -C Linux_g++_queues_simple_producer_consumer
	$(MAKE) -C Linux_g++_queues_simple_producer_consumer_no_except
	$(MAKE) -C Linux_g++_read_write_lock_prefer_reader
	$(MAKE) -C Linux_g++_read_write_lock_prefer_reader_no_except
	$(MAKE) -C Linux_g++_read_write_lock_prefer_writer
	$(MAKE) -C Linux_g++_read_write_lock_prefer_writer_no_except
	$(MAKE) -C Linux_g++_simple_tasks
	$(MAKE) -C Linux_g++_simple_tasks_no_cpp_strings
	$(MAKE) -C Linux_g++_simple_tasks_no_vTaskDelete
	$(MAKE) -C Linux_g++_task_delete
	$(MAKE) -C Linux_g++_tasklet_dtor
	$(MAKE) -C Linux_g++_tasklet_dtor_no_except
	$(MAKE) -C Linux_g++_tasklets
	$(MAKE) -C Linux_g++_tasklets_no_except
	$(MAKE) -C Linux_g++_tickhook_disable
	$(MAKE) -C Linux_g++_tickhooks
	$(MAKE) -C Linux_g++_timers
	$(MAKE) -C Linux_g++_timers_no_except
	$(MAKE) -C Linux_g++_unnamed_tasks
	$(MAKE) -C Linux_g++_unnamed_tasks_no_cpp_strings
	$(MAKE) -C Linux_g++_workqueues
	$(MAKE) -C Linux_g++_workqueues_delete


